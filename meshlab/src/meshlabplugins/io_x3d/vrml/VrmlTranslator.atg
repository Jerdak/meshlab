#include <QtXml>
#include <set>

COMPILER VrmlTranslator

	QDomDocument *doc;
	
	std::map<QString, QString> defNode;
	
	std::set<QString> proto;
	
	std::set<QString> x3dNode;
	
	void InitX3dNode()
	{
	  x3dNode.insert("Arc2D"); x3dNode.insert("ArcClose2D"); x3dNode.insert("BallJoint");
	  x3dNode.insert("BooleanFilter"); x3dNode.insert("BooleanSequencer"); x3dNode.insert("BooleanToggle");
	  x3dNode.insert("BooleanTrigger"); x3dNode.insert("BoundedPhysicsModel"); x3dNode.insert("CADAssembly");
	  x3dNode.insert("CADFace"); x3dNode.insert("CADLayer"); x3dNode.insert("CADPart");
	  x3dNode.insert("Circle2D"); x3dNode.insert("ClipPlane"); x3dNode.insert("CollidableOffset");
	  x3dNode.insert("CollidableShape"); x3dNode.insert("CollisionCollection"); x3dNode.insert("CollisionSensor");
	  x3dNode.insert("CollisionSpace"); x3dNode.insert("ColorDamper");x3dNode.insert("ColorRGBA");
	  x3dNode.insert("ComposedCubeMapTexture"); x3dNode.insert("ComposedShader");
	  x3dNode.insert("ComposedTexture3D"); x3dNode.insert("ConeEmitter"); x3dNode.insert("Contact");
	  x3dNode.insert("Contour2D"); x3dNode.insert("ContourPolyline2D"); x3dNode.insert("CoordinateDamper");
	  x3dNode.insert("CoordinateDouble"); x3dNode.insert("CoordinateInterpolator2D");
	  x3dNode.insert("DISEntityManager"); x3dNode.insert("DISEntityTypeMapping");
	  x3dNode.insert("Disk2D"); x3dNode.insert("DoubleAxisHingeJoint"); x3dNode.insert("EaseInEaseOut");
	  x3dNode.insert("EspduTransform"); x3dNode.insert("ExplosionEmitter");
	  x3dNode.insert("FillProperties"); x3dNode.insert("FloatVertexAttribute");
	  x3dNode.insert("FogCoordinate"); x3dNode.insert(" GeneratedCubeMapTexture");
	  x3dNode.insert("GeoCoordinate"); x3dNode.insert("GeoElevationGrid"); x3dNode.insert("GeoLocation"); 
	  x3dNode.insert("GeoLOD"); x3dNode.insert("GeoMetadata"); x3dNode.insert("GeoOrigin");
	  x3dNode.insert("GeoPositionInterpolator"); x3dNode.insert("GeoProximitySensor");
	  x3dNode.insert("GeoTouchSensor"); x3dNode.insert("GeoViewpoint");	x3dNode.insert("GravityPhysicsModel");
	  x3dNode.insert("HAnimDisplacer"); x3dNode.insert("HAnimHumanoid"); x3dNode.insert("HAnimJoint");
	  x3dNode.insert("HAnimSegment"); x3dNode.insert("HAnimSite"); x3dNode.insert("ImageCubeMapTexture");
	  x3dNode.insert("ImageTexture3D"); x3dNode.insert("IndexedQuadSet"); x3dNode.insert("IndexedTriangleFanSet");
	  x3dNode.insert("IndexedTriangleSet"); x3dNode.insert("IndexedTriangleStripSet");
	  x3dNode.insert("IntegerSequencer"); x3dNode.insert("IntegerTrigger"); x3dNode.insert("KeySensor");
	  x3dNode.insert("Layer"); x3dNode.insert("LayerSet"); x3dNode.insert("Layout");
	  x3dNode.insert("LayoutGroup"); x3dNode.insert("LayoutLayer"); x3dNode.insert("LinePicker");
	  x3dNode.insert("LineProperties"); x3dNode.insert("LineSet"); x3dNode.insert("LoadSensor");
	  x3dNode.insert("LocalFog"); x3dNode.insert("Material"); x3dNode.insert("Matrix3VertexAttribute"); 
	  x3dNode.insert("Matrix4VertexAttribute"); x3dNode.insert("MetadataDouble");
	  x3dNode.insert("MetadataFloat"); x3dNode.insert("MetadataInteger"); x3dNode.insert("MetadataSet");
	  x3dNode.insert("MetadataString"); x3dNode.insert("MotorJoint"); x3dNode.insert("MultiTexture");
	  x3dNode.insert("MultiTextureCoordinate"); x3dNode.insert("MultiTextureTransform");
	  x3dNode.insert("NurbsCurve"); x3dNode.insert("NurbsCurve2D"); x3dNode.insert("NurbsOrientationInterpolator");
	  x3dNode.insert("NurbsPatchSurface"); x3dNode.insert("NurbsPositionInterpolator"); x3dNode.insert("NurbsSet");
	  x3dNode.insert("NurbsSurfaceInterpolator"); x3dNode.insert("NurbsSweptSurface");
	  x3dNode.insert("NurbsSwungSurface"); x3dNode.insert("NurbsTextureCoordinate");
	  x3dNode.insert("NurbsTrimmedSurface"); x3dNode.insert("OrientationChaser");
	  x3dNode.insert("OrientationDamper"); x3dNode.insert("OrthoViewpoint"); x3dNode.insert("PackagedShader");
	  x3dNode.insert("ParticleSystem"); x3dNode.insert("PickableGroup"); x3dNode.insert("PixelTexture3D");
	  x3dNode.insert("PointEmitter"); x3dNode.insert("PointPicker"); x3dNode.insert("PointSet");
	  x3dNode.insert("Polyline2D"); x3dNode.insert("PolylineEmitter"); x3dNode.insert("Polypoint2D");
	  x3dNode.insert("PositionChaser"); x3dNode.insert("PositionChaser2D"); x3dNode.insert("PositionDamper");
	  x3dNode.insert("PositionDamper2D"); x3dNode.insert("PositionInterpolator2D");
	  x3dNode.insert("PrimitivePicker"); x3dNode.insert("ProgramShader"); x3dNode.insert("QuadSet");
	  x3dNode.insert("ReceiverPdu"); x3dNode.insert("Rectangle2D"); x3dNode.insert("RigidBody");
	  x3dNode.insert("RigidBodyCollection"); x3dNode.insert("ScalarChaser"); x3dNode.insert("ScreenFontStyle");
	  x3dNode.insert("ScreenGroup"); x3dNode.insert("ShaderPart"); x3dNode.insert("ShaderProgram");
	  x3dNode.insert("SignalPdu"); x3dNode.insert("SingleAxisHingeJoint"); x3dNode.insert("SliderJoint");
	  x3dNode.insert("SplinePositionInterpolator");	x3dNode.insert("SplinePositionInterpolator2D");
	  x3dNode.insert("SplineScalarInterpolator"); x3dNode.insert("SquadOrientationInterpolator");
	  x3dNode.insert("StaticGroup"); x3dNode.insert("StringSensor"); x3dNode.insert("SurfaceEmitter");
	  x3dNode.insert("TexCoordDamper"); x3dNode.insert("TextureBackground");
	  x3dNode.insert("TextureCoordiante3D"); x3dNode.insert("TextureCoordinate4D");
	  x3dNode.insert("TextureCoordinateGenerator"); x3dNode.insert("TextureProperties");
	  x3dNode.insert("TextureTransformMatrix3D"); x3dNode.insert("TextureTransform3D");
	  x3dNode.insert("TimeTrigger"); x3dNode.insert("TransformSensor"); x3dNode.insert("TransmitterPdu");
	  x3dNode.insert("TriangleFanSet"); x3dNode.insert("TriangleSet"); x3dNode.insert("TriangleSet2D");
	  x3dNode.insert("TriangleStripSet"); x3dNode.insert("TwoSidedMaterial"); x3dNode.insert("UniversalJoint");
	  x3dNode.insert(" Viewpoint"); x3dNode.insert("ViewpointGroup"); x3dNode.insert("VolumeEmitter");
	  x3dNode.insert("VolumePicker"); x3dNode.insert("WindPhysicsModel");
	}
	
CHARACTERS
	digit = "0123456789".
	invalidChar = '\u0000' .. '\u0020'.
	idRestChar = ANY - invalidChar - '\u0022' - '\u0023' - '\u0027' - '\u002c' -  '\u002e' - '\u005b' - '\u005c' - '\u005d' - '\u007b' -'\u007d' - '\u007f'.
	idFirstChar = idRestChar - digit - '\u002b' - '\u002d'.
	hexDigit = digit + "ABCDEFabcdef".
	notDigit = ANY - digit.
	regularStringChar  = ANY - '"' - '\\' - '\n' - '\r'.
	commentCont = ANY - '\n' - '\r'.
	
TOKENS
	id = idFirstChar {idRestChar}.
	intCont	= ['+'|'-']( digit {digit} | ("0x" | "0X") hexDigit {hexDigit}).
	realCont = ['+'|'-'] ("." digit {digit} [("e" | "E") ["+" | "-"] digit {digit}]
			| digit {digit} ( "." {digit} [("e" | "E" ) ["+" | "-"] digit {digit} ] | ("e" | "E") ["+" | "-"] digit {digit})).
	string = "\""  { regularStringChar
          | "\\\'" | "\\\"" | "\\\\" | "\\0" | "\\a" | "\\b" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v"
          | "\\x" hexDigit [hexDigit] [hexDigit] [hexDigit]
          | "\\u" hexDigit hexDigit hexDigit hexDigit
          | "\\U" hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit
		  | "\n" | "\r" | "\t"
          } "\"".
		  
	x3dVersion = "V3.0" | "V3.1" | "V3.2".
	vrmlVersion = "V2.0".
	
/*PRAGMAS
	comment = "#" {commentCont}.
*/
COMMENTS FROM '#' TO '\n'

IGNORE '\r' + '\n' + '\t'

PRODUCTIONS

VrmlTranslator 				(.QDomElement root = doc->createElement("X3D");
							  QDomElement scene = doc->createElement("Scene");
							  root.appendChild(scene);
							  InitX3dNode();.)
=   [HeaderStatement]
	[ProfileStatement]
	ComponentStatements
	MetaStatements
	Statements<scene>		(.doc->appendChild(root);.)
	.
	
HeaderStatement 
=	"#"("X3D" [x3dVersion] | "VRML" [vrmlVersion]) "utf8" [string].

 
ProfileStatement
= 	"PROFILE" ProfileNameId. 


ProfileNameId
=	id.

 
ComponentStatements 
=	{ComponentStatement
	}.

 
ComponentStatement 
=	"COMPONENT" ComponentNameId
	":"ComponentSupportLevel. 


ComponentNameId 
=	id. 


ComponentSupportLevel 
=	intCont.

 
ExportStatement 		(.QString str;.)
=	"EXPORT" NodeNameId<str>
	"AS" ExportedNodeNameId.
	

ImportStatement 		(.QString str;.)
=	"IMPORT" InlineNodeNameId
	"."ExportedNodeNameId
	"AS" NodeNameId<str>.

	
MetaStatements 
=	{MetaStatement 
	}.
	

MetaStatement 
=	"META" Metakey
	Metavalue.
	
	
Metakey
= string.

 
Metavalue 
= string.

 
Statements <QDomElement& parent> 		
=	{Statement<parent>				
	}.

	
Statement <QDomElement& parent> 
=	NodeStatement<parent>
	| ImportStatement
	| ExportStatement
	| ProtoStatement<parent>
	| RouteStatement.

	
NodeStatement <QDomElement& parent>	(.QString tagName, attrValue;.)
= 	(Node<parent, tagName, "">
	| "DEF" NodeNameId<attrValue>	
	Node<parent, tagName, attrValue>
	| "USE" NodeNameId<attrValue>	(.std::map<QString, QString>::const_iterator iter = defNode.find(attrValue);
									  if(iter != defNode.end())
									  {
									    QDomElement node = doc->createElement(iter->second);
									    node.setAttribute("USE", attrValue);
									    parent.appendChild(node);
									  }.)
	)
	.	

	
RootNodeStatement <QDomElement& parent>	(.QString tagName, attrValue;.)
=	(Node<parent, tagName, "">
	| "DEF" NodeNameId<attrValue>	 
	Node<parent, tagName, attrValue>
	).
	
ProtoStatement <QDomElement& parent>
=	Proto<parent>
	| Externproto<parent>.

	
ProtoStatements <QDomElement& parent> 		
=	{ProtoStatement<parent>				
	}.
	 
	 
Proto <QDomElement& parent>				(.QString name; QDomElement node;.)
=	"PROTO" NodeTypeId<name>			(.node = doc->createElement("ProtoDeclare");
										  node.setAttribute("name", name);
										  proto.insert(name);.)
	"[" 								(.QDomElement interface = doc->createElement("ProtoInterface");.)
	InterfaceDeclarations<interface> 	(.node.appendChild(interface);.)
	"]" "{"								(.QDomElement body = doc->createElement("ProtoBody");.) 
	ProtoBody<body>						(.node.appendChild(body);.)
	"}"									(.parent.appendChild(node);.)
	.


ProtoBody <QDomElement& parent>
=	ProtoStatements<parent>
	RootNodeStatement<parent>
	Statements<parent>.

	
InterfaceDeclarations <QDomElement& parent>
=	{InterfaceDeclaration<parent>
	}.

	
RestrictedInterfaceDeclaration <QDomElement& parent> 	(.QString name; QString type; QString val;
														  QDomElement node = doc->createElement("field");.)
=	(("inputOnly" | "eventIn") FieldType<type>
	InputOnlyId<name>									(.node.setAttribute("accessType", "inputOnly");.) 
	| ("outputOnly" | "eventOut") FieldType<type>
	OutputOnlyId<name>									(.node.setAttribute("accessType", "outputOnly");.)
	| ("initializeOnly" | "field") FieldType<type>
	InitializeOnlyId<name>
	FieldValue<node, "value", false>					(.node.setAttribute("accessType", "initializeOnly");.)
	) 													(.node.setAttribute("name", name);
														  node.setAttribute("type", type);
														  parent.appendChild(node);.)
	.

	
InterfaceDeclaration <QDomElement& parent>	(.QString name, type, val; QDomElement node;.)
= 	RestrictedInterfaceDeclaration<parent>
	| ("inputOutput" | "exposedField")
	FieldType<type> 
	FieldId<name> 
	FieldValue<node, "value", false>		(.node = doc->createElement("field");
											  node.setAttribute("name", name);
											  node.setAttribute("type", type);
											  node.setAttribute("accessType", "inputOutput");
											  parent.appendChild(node);.)
	.
	

Externproto <QDomElement& parent>			(.QString name, url;
											  QDomElement node = doc->createElement("ExternProtoDeclare");.) 
=	"EXTERNPROTO" NodeTypeId<name>			 
	"["	ExternInterfaceDeclarations<node>
	"]" URLList<url>						(.std::set<QString>::const_iterator iter = x3dNode.find(name);
											  if (iter == x3dNode.end())
											  {
											    node.setAttribute("name", name);
											    node.setAttribute("url", url);
											    parent.appendChild(node);
											    proto.insert(name);
											  }.)
	.

	
ExternInterfaceDeclarations <QDomElement& parent>
= 	{ExternInterfaceDeclaration<parent>
	}.

	
ExternInterfaceDeclaration <QDomElement& parent>	(.QString type, name;
													  QDomElement node = doc->createElement("field");.)
=	(("inputOnly" | "eventIn")			
	FieldType<type> InputOnlyId<name>				(.node.setAttribute("accessType", "inputOnly");.)
	| ("outputOnly" | "eventOut")
	FieldType<type> OutputOnlyId<name>				(.node.setAttribute("accessType", "outputOnly");.)
	| ("initializeOnly" | "field")
	FieldType<type> InitializeOnlyId<name>			(.node.setAttribute("accessType", "initializeOnly");.)
	| ("inputOutput" | "exposedField")
	FieldType<type> FieldId<name>					(.node.setAttribute("accessType", "inputOutput");.)
	)												(.node.setAttribute("name" , name);
													  node.setAttribute("type", type);
													  parent.appendChild(node);.)
	.

	
RouteStatement 					(.QString str;.)
=	"ROUTE" NodeNameId<str>
	"." OutputOnlyId<str>
	"TO" NodeNameId <str>
	"." InputOnlyId<str>.

	
URLList <QString& url>
=	string						(.url = QString(coco_string_create_char(t->val));.)
	| "["{string				(.url.append(coco_string_create_char(t->val)); url.append(" ");.)
	[',']}"]".
 

Node <QDomElement& parent, QString& tagName, const QString defValue>	(.bool flag = false; QDomElement node;.)		
= 	(NodeTypeId<tagName>												(.std::set<QString>::const_iterator iter = proto.find(tagName);
																		  if (iter != proto.end())
																		  {
																		    node = doc->createElement("ProtoInstance");
																		    node.setAttribute("name", tagName);
																		    flag = true;
																		  }
																		  else
																		    node = doc->createElement(tagName);
																		  if (defValue != "")
																		  {
																		    node.setAttribute("DEF", defValue);
																		    defNode[defValue] = tagName;
																		  }.) 
	"{" NodeBody<node, flag> "}"
	| "Script" "{" ScriptBody "}"										(.node = doc->createElement("Script");.)
	)																	(.parent.appendChild(node);.)
	.

	
NodeBody <QDomElement& parent, bool flag>
=	{NodeBodyElement<parent, flag>
	}.

ScriptBody 
=	{ScriptBodyElement
	}.

	
ScriptBodyElement 							(.QString str; QDomElement elem;.)
=	NodeBodyElement<elem, false>
	|("inputOnly" | "eventIn") FieldType<str> InputOnlyId<str> ["IS" InputOnlyId<str>]
	|("outputOnly" | "eventOut") FieldType<str> OutputOnlyId<str> ["IS" OutputOnlyId<str>]
	|("initializeOnly" | "field") FieldType<str> InitializeOnlyId<str> (FieldValue<elem, "", false> | "IS" InitializeOnlyId<str>)
	|("inputOutput" | "exposedField") FieldType<str> InputOutputId<str> "IS" InputOutputId<str>.
	
	
NodeBodyElement <QDomElement& parent, bool flag>	(.QString idName, idProto; QDomElement node;.)
=	id												(.idName = QString(coco_string_create_char(t->val));.) 
	(FieldValue<parent, idName, flag>
		| "IS" id									(.idProto = QString(coco_string_create_char(t->val));
													  node = doc->createElement("IS");
													  QDomElement connect = doc->createElement("connect");
													  connect.setAttribute("nodeField", idName);
													  connect.setAttribute("protoField", idProto);
													  node.appendChild(connect);
													  parent.appendChild(node);
													.)
	)| RouteStatement
	| ProtoStatement<parent>.

	
NodeNameId <QString& str>
=	id				(.str = QString(coco_string_create_char(t->val));.). 


NodeTypeId <QString& str> 
=	id				(.str = QString(coco_string_create_char(t->val));.).

 
InlineNodeNameId 
=	id.

 
ExportedNodeNameId 
=	id.

 
InitializeOnlyId <QString& str> 
= 	id				(.str = QString(coco_string_create_char(t->val));.).

 
InputOnlyId <QString& str> 
=	id				(.str = QString(coco_string_create_char(t->val));.). 


InputOutputId <QString& str> 
=	id				(.str = QString(coco_string_create_char(t->val));.). 


OutputOnlyId <QString& str> 
=	id				(.str = QString(coco_string_create_char(t->val));.).


FieldId <QString& str> 
= 	id				(.str = QString(coco_string_create_char(t->val));.).
 
FieldType <QString& str> 
=	("MFBool" | "MFColor" | "MFColorRGBA" | "MFDouble" | "MFFloat" | "MFImage" | "MFInt32" |
	"MFMatrix3d" | "MFMatrix3f" | "MFMatrix4d" | "MFMatrix4f" | "MFNode" | "MFRotation" |
	"MFString" | "MFTime" | "MFVec2d" | "MFVec2f" | "MFVec3d"| "MFVec3f" | "MFVec4d" |
	"MFVec4f" | "SFBool" | "SFColor" | "SFColorRGBA" | "SFDouble" | "SFFloat" | "SFImage" |
	"SFInt32" | "SFMatrix3d" | "SFMatrix3f" | "SFMatrix4d" | "SFMatrix4f" | "SFNode" |
	"SFRotation" | "SFString" | "SFTime" | "SFVec2d" | "SFVec2f" | "SFVec3d" | "SFVec3f" | 
	"SFVec4d" | "SFVec4f")  (.str = QString(coco_string_create_char(t->val));.). 
 

FieldValue <QDomElement& parent, QString fieldName, bool flag>  
= 	SingleValue<parent, fieldName, flag>
	| MultiValue<parent, fieldName, flag>.


SingleValue <QDomElement& parent, QString fieldName, bool flag>  (.QString value; QDomElement tmpParent = doc->createElement("tmp");.)
= 	(string														(.value.append(coco_string_create_char(t->val)); value.remove("\"");.)
	| (intCont|realCont)										(.value.append(coco_string_create_char(t->val));.)
	[","]{(intCont|realCont)											(.value.append(" "); value.append(coco_string_create_char(t->val));.)
	[","]}
	| "TRUE"													(.value = "true";.)
	| "FALSE"													(.value = "false";.)
		)														(.if (flag)
																  {
																    QDomElement node = doc->createElement("fieldValue");
																    node.setAttribute("name", fieldName);
																    node.setAttribute("value", value);
																    parent.appendChild(node);
																  }
																  else
																    parent.setAttribute(fieldName, value);.)
		| NodeStatement<tmpParent>								(.if (flag)
																  {
																    QDomElement tmp = doc->createElement("fieldValue");
																    tmp.setAttribute("name", fieldName);
																    tmp.appendChild(tmpParent.firstChildElement());
																    parent.appendChild(tmp);
																  }
																  else
																    parent.appendChild(tmpParent.firstChildElement());.)
																	
	.

	
MultiValue <QDomElement& parent, QString fieldName, bool flag>  (.QString value; QDomElement tmpParent = doc->createElement("tmp");.)
=	"["
	((MultiNumber<value>
	|MultiString<value>
	|MultiBool<value>)											(.if (flag)
																  {
																    QDomElement tmp = doc->createElement("fieldValue");
																    tmp.setAttribute("name", fieldName);
																    tmp.setAttribute("value", value);
																    parent.appendChild(tmp);
																  }
																  else
																    parent.setAttribute(fieldName, value);
																.)
	|{NodeStatement<tmpParent>[","]}									(.QDomElement child;
																  QDomNodeList list = tmpParent.childNodes();
																  QDomElement field = doc->createElement("field");
																  field.setAttribute("name", fieldName);
																  int i = 0;
																  while(i < list.size())
																  {
																    child = list.at(i).toElement();
																    if (flag)
																      field.appendChild(child.cloneNode());
																    else
																      parent.appendChild(child.cloneNode());
																    i++;
																  }
																  if (flag)
																    parent.appendChild(field);
																.)
	)
	"]".

MultiNumber<QString& value>
= 	(intCont|realCont)		(.value.append(coco_string_create_char(t->val));.)
	[","]
	{(intCont|realCont)			(.value.append(" "); value.append(coco_string_create_char(t->val));.)
	[","]}.

MultiString<QString& value>
= 	(string)				(.value.append(coco_string_create_char(t->val));.)
	[","]
	{string						(.value.append(" "); value.append(coco_string_create_char(t->val));.)
	[","]}.

MultiBool<QString& value>
= 	("TRUE"|"SALVE")			(.value.append(coco_string_create_char(t->val));.)
	[","]
	{("TRUE"|"FALSE")		(.value.append(" "); value.append(coco_string_create_char(t->val));.)
	[","]}.


 
END VrmlTranslator.